abstract
Abstract
The <b>Abstract</b> will be used for full-text searches, and it should be rich with descriptive text. Multiple paragraphs may be included.

In particular, descriptions should include information that does not fit into structured metadata, and focus on the “what”, “when”, and “where” information, general taxonomic information, as well as whether the data package is ongoing or completed.

Some general methods description is appropriate, and broad classes of measured parameters should also be included.  For a large number of parameters, use categories instead of listing all parameters (e.g. use the term “nutrients” instead of nitrate, phosphate, calcium, etc.), in combination with the parameters that seem most relevant for search.

An abstract is not required, but it is highly recommended.
--------------------
add_load_data_tables
Add/Load Data Tables
You can create a data table's metadata "from scratch" via <b>Add Data Table from Scratch</b>, or you can load an existing data table CSV file via <b>Load Data Table from CSV File</b>. Use the latter method if you have a CSV file available; it will save you time and effort.

When you use <b>Load Data Table from CSV File</b>, many of the data table's characteristics will be automatically extracted or inferred from the file, but some others will still need to be entered or modified manually. <b>Note: If the file is modified after it is loaded, it will need to be re-uploaded, since some of the inferred metadata (e.g., checksum, file size) is version-specific.</b>

ezEML follows common practice by applying the term "CSV" loosely: the file may use commas as field delimiters, or it may use one of several other field delimiters: tabs, semicolons, colons, or vertical bars ("|"). The CSV file must have a single header row and no footer rows.

The CSV file must be <b>UTF-8 encoded</b>. If you save the file in Microsoft Excel, select "CSV UTF-8 (Comma delimited) (.csv)" as the File Format. Note that Excel, like ezEML, applies the term "CSV" loosely and will save the file with a ".csv" extension even if you use a different field delimiter.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/P_87XcXyvug" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
add_load_other_entities
Add/Load Other Entities
You can create an other entity's metadata "from scratch" via <b>Add Other Entity from Scratch</b>, or you can load an existing other entity file via <b>Load Other Entity from File</b>.

In the latter case, a number of the other entity's characteristics will be automatically extracted or inferred from the file, but some others will still need to be entered or modified manually. <b>Note: If the file is modified after it is loaded, it will need to be re-uploaded, since some of the inferred metadata (e.g., checksum, file size) is version-specific.</b>
--------------------
associatedParty
Associated Party
Associated parties are other people who were involved with the data in some way (field technicians, students, assistants, etc.).

Associated parties are not required.
--------------------
associated_parties
Associated Parties
Associated parties are other people who were involved with the data in some way (field technicians, students, assistants, etc.).

Associated parties are not required.
--------------------
attribute_definition
Column Definition
A precise definition of the column. It explains the contents of the column fully so that a data user can interpret the column accurately.

Example: "spden" is the number of individuals of all macro invertebrate species found in the plot.
--------------------
attribute_label
Column Label

A descriptive label that can be used to display the name of a column. This is often a longer name than the column name and may consist of multiple words. It is not constrained by system limitations on length or special characters in the way the column name is constrained.

For example, a column with a name of 'spcode' might have a column label of 'Species Code'.
--------------------
attribute_name
Column Name
Column name is the official name of the column. This is usually a short, sometimes cryptic name that is used to refer to the column. Many systems have restrictions on the length of column names and on the use of special characters such as spaces in the name, so the column name may not be ideal for display purposes (use Label for display).

The column name is usually the name of the variable in the header of a data file.
--------------------
attribute_datetime_format
Format String
A format string that describes the format for a DateTime value from the Gregorian calendar.

DateTime values should be expressed in a format that conforms to the ISO 8601 standard. To describe the format, construct a string representation of the format using the following symbols:
<ul>
<li>              Y   year
<li>              M   month
<li>              W   month abbreviation (e.g., JAN)
<li>              D   day
<li>              h   hour
<li>              m   minute
<li>              s   second
<li>              T   time designator (demarcates date and time parts of date-time)
<li>              Z   UTC designator, indicating value is in UTC time
<li>              .   indicates a decimal fraction of a unit
<li>              +/- indicates a positive or negative number, or a positive or negative time zone adjustment relative to UTC
<li>              -   indicates a separator between date components
<li>              A/P am or pm designator
</ul>
              Any other character in the format string is interpreted as a
              separator character.  Here are some examples of the format
              strings that can be constructed.
<pre>
                 Format string          Example value<br>
                 -------------------    ------------------<br>
  ISO Date       YYYY-MM-DD             2002-10-14<br>
  ISO Datetime   YYYY-MM-DDThh:mm:ss    2002-10-14T09:13:45<br>
  ISO Datetime   YYYY-MM-DDThh:mm:ss-hh 2002-10-14T09:13:45-07<br>
  ISO Time       hh:mm:ss               17:13:45<br>
  ISO Time       hh:mm:ss.sss           09:13:45.432<br>
  ISO Time       hh:mm.mm               09:13.42
</pre>

For a list of the DateTime format strings recommended by the EDI data repository, click <b><a href='/eml/datetime_formats'>here</a></b>.
--------------------
attribute_datetime_precision
DateTime Precision
A quantitative indication of the precision of a date or time value.

The precision should be interpreted in the smallest units represented by the dateTime format. For example, if a dateTime value has a format of "hh:mm:ss.sss", then "seconds" are the smallest unit and the precision should be expressed in seconds. Thus, a precision value of "0.01" would mean that measurements were precise to the nearest hundredth of a second, even though the format string might indicate that values were written down with 3 decimal places.
--------------------
attribute_number_type
Number Type
The possible values for <b>Number Type</b> are as follows:<br>
<b>Real</b> - Continuous quantities that can be represented by decimal values, e.g. 2.0, 3.14, -2.718, 42, 0<br>
<b>Integer</b> - Positive or negative values that can be written without a fractional component, e.g., 3, -2, 127, 0<br>
<b>Natural</b> - The "counting numbers": 1, 2, 3, etc.<br>
<b>Whole</b> - The natural numbers plus the number zero, i.e., 0, 1, 2, 3, etc.
--------------------
attribute_numerical_precision
Precision
The precision of the measurement.

Precision indicates how close together or how repeatable measurements are. A precise measuring instrument will give very nearly the same result each time it is used. This means that someone interpreting the data should expect that if a measurement were repeated, most measured values would fall within the interval specified by the precision. The value of precision should be expressed in the same unit as the measurement. For example, for a column with unit "meter", a precision of "0.1" would be interpreted to mean that most repeat measurements would fall within an interval of 1/10th of a meter.
--------------------
attribute_storage_type
Storage Type
<b>Storage Type</b> provides a "hint" for processing systems as to how the column's data might be represented in a system or language. Values for this field are by default drawn from the XML Schema data types standard values, such as: integer, double, string, etc.

<b>Storage Type System</b> specifies the system used to define the storage types. It should be an identifier of a well known and published typing system. The default and recommended system is the XML Schema data type system. For details go to http://www.w3.org. If another system is used (such as Java or C++ types), <b>Storage Type System</b> should be changed accordingly.
--------------------
award
Funding Award
Information on a funding award associated with the project.

Required fields are provided for the name of the funding agency and the title of the award.

Optional fields are provided as well for the Open Funder Registry identifiers for the agency and program that made the award, the award number assigned, and the URL to the award page describing the award.
--------------------
award_number
Award Number
The unique identifier used by the funder to uniquely identify an award.

These are typically alphanumeric values that are unique within the system used by a given funder. The number should be listed using the canonical form that each funder uses to express its award numbers and should not be prefixed or postfixed with extra text such as the acronym of the funder or the name of the funder, which is available instead in the Funder Name field.
--------------------
award_title
Award Title
The title of the award or grant. This field is required.

Example:  Scientia Arctica: A Knowledge Archive for Discovery and Reproducible Science in the Arctic
--------------------
award_url
Award URL
The URL associated with award.

Typically, the Award URL is use to find and locate the award, and it generally addresses the internet location to find out more information about the award.

It should point to a funder site for the award, rather than a project site.
--------------------
awards
Funding Awards
The funding awards for the project.

Each funding award is described by the name of the funding agency and the title of the award.

Optional fields are provided as well for the Open Funder Registry identifiers for the agency and program that made the award, the award number assigned, and the URL to the award page describing the award.
--------------------
bounding_altitudes
Bounding Altitudes
<b>Bounding Altitudes</b> lets you specify altitudinal (elevation) measurements for the bounding box being described. The minimum and maximum altitudes should be in reference to a known datum (e.g., Mean Sea Level), which should be specified as part of the Geographic Description.

If any of the fields (Altitude Minimum, Altitude Maximum, Altitude Units) are filled in, they all must be.
--------------------
bounding_coordinates
Bounding Coordinates
<b>Bounding Coordinates</b> are the four margins (N, S, E, W) of a bounding box, or when considered in lat-lon pairs, the corners of the box. These elements are meant to convey general information and are not for accurate mapping.

The limits of coverage of a data set should be expressed as <b>decimal latitudes and longitudes</b>. By convention, latitudes and longitudes are referenced to the Equator and to the Prime Meridian, respectively. By definition, the 0 and 180 meridians themselves do not belong in either hemisphere, but local conventions may place them in either.

All coordinates are typed as decimals. Since all four elements are required, a bounding area that is a single point should use the same values for North Bounding Coordinate and South Bounding Coordinate, and likewise for West Bounding Coordinate and East Bounding Coordinate.

In the case of a data set that comprises all longitudes (e.g., a horizontal band between 2 parallels that fully encompasses the earth), use a West Bounding Coordinate of -180.0 and an eastBoundingCoordinate of 180.0 (or +180.0).
--------------------
check_data_tables
Check Data Tables
<b>Check Data Tables</b> performs various quality checks on the contents of data tables.

In particular, it checks whether the entries in a data table's column have the expected type and format as specified in the metadata for the table. For instance, if a column is specified as having Numerical type with Number Type "integer", then non-integer entries will be flagged. If a column is specified as having DateTime type with Format String "YYYY-MM-DD", then entries with a different format will be flagged. If a column is specified as having Categorical type with the option to "Allow only the code values that are defined here" selected, then entries that do not match any of the defined categorical codes will be flagged.

Empty entries and entries that match a specified Missing Value Code are not flagged.

The <b>Check Data Tables</b> page lists the data tables contained in the data package. For each data table, there is a status indicator, as follows:<br>
- Yellow: the data table has not yet been checked -- or the table or its metadata has changed so that the table needs to be re-checked<br>
- Red: the data table has been checked and contains one or more errors<br>
- Green: the data table has been checked and contains no errors.

If any of the tables has a Red status, the overall status for Check Data Tables will be red. Otherwise, if any has a Yellow status, the overall status will be yellow. If all the tables have Green status, the overall status will be green.

To check a data table, click the <b>Check data table</b> link on the row for that table. If the table has already been checked and has errors, click the <b>Show errors</b> link to display the errors. It can take up to several minutes to check a table, depending on its size. For large tables, you will be warned that the check may be lengthy and will be given the opportunity to cancel and run the check later. The results of a check are saved, so you won't have to wait each time you consult the results for a table that has already been checked.

When data packages are submitted to EDI's data repository, data table error checking is performed there as well. Experienced users of the repository may recognize that the repository's error checking is more permissive than the checking being done here in ezEML. ezEML’s error checking is intended to reflect best practices and help data providers minimize the data cleaning burden that will be passed on to consumers of their data.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/hXbIDffHHcE" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
clone_attributes_general
Clone Column Properties from Another Data Table
Suppose you’ve uploaded a data table and filled out its columns’ properties, and then you upload a second data table, and some of the second table’s columns have the same properties as particular columns in the first table. It would be inconvenient to have to enter the second table’s columns’ properties all over again. Instead, you can use <b>Clone Column Properties from Another Data Table</b> to “clone” the properties of selected columns in the first table into specified columns in the second table. This is useful, for example, when you have modified a table by adding, deleting, or reordering columns.

In the scenario above, we refer to the first data table as the <b>source</b> table and the second data table as the <b>target</b> table. The source table is not required to be in the current data package. It could be in another data package that you prepared with ezEML at an earlier time.

Note that if you've simply added some rows, corrected some cell values, or renamed one or more columns (i.e., you haven't significantly altered the <i>structure</i> of the table), you can use the <b>Re-upload</b> feature instead of the more complicated <b>Clone Column Properties from Another Data Table</b> feature.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=N5Z4cXW0Jzk" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
clone_attributes_1
Clone Column Properties from Another Data Table
Suppose you’ve uploaded a data table and filled out its columns’ properties, and then you upload a second data table, and some of the second table’s columns have the same properties as particular columns in the first table. It would be inconvenient to have to enter the second table’s columns’ properties all over again. Instead, you can use <b>Clone Column Properties from Another Data Table</b> to “clone” the properties of selected columns in the first table into specified columns in the second table. This is useful, for example, when you have modified a table by adding, deleting, or reordering columns.

In the scenario above, we refer to the first data table as the <b>source</b> table and the second data table as the <b>target</b> table. The source table is not required to be in the current data package. It could be in another data package that you prepared with ezEML at an earlier time.

Note that if you've simply added some rows, corrected some cell values, or renamed one or more columns (i.e., you haven't significantly altered the <i>structure</i> of the table), you can use the <b>Re-upload</b> feature instead of the more complicated <b>Clone Column Properties from Another Data Table</b> feature.

Begin by selecting the data package that contains the source data table. This may be the current data package or some other one. Then click <b>Open for Cloning</b>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=N5Z4cXW0Jzk" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
clone_attributes_2
Clone Column Properties from Another Data Table
Having selected the data package that contains the source data table, the next step is to select the source data table from the list of data tables in the package. Then click <b>Select Data Table</b>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=N5Z4cXW0Jzk" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
clone_attributes_3
Clone Column Properties
Having selected the source data table, the next step is to select the particular columns in the source data table whose properties you wish to clone.

Select one or more columns, then click <b>Select Columns</b>.

<b>Note:</b> If you want to clone a number of columns, you can do them all in the same pass, or you can do one or a few columns at a time if that seems more manageable. I.e., you can clone some columns, take a look at the result, then clone some more columns, etc., by going through the <b>Clone Column Properties from Another Data Table</b> process repeatedly.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=N5Z4cXW0Jzk" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
clone_attributes_4
Clone Column Properties
Having selected the particular columns whose properties you wish to clone, the next step is to match them up with the columns in the target data table that will receive the cloned properties.

For each Source Column, select a Target Column in the target data table. After you've done that, click <b>Clone Column Properties</b>. Note that the source and target columns do not have to have the same names in the two tables or appear in the same order.

The properties of the source columns will be copied into the target columns, except that the <b>Name</b> of each target column will not be changed.

Categorical columns get special handling: codes in the target column are preserved, but if a code exists in the source column, the source column's definition for the code is used.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=N5Z4cXW0Jzk" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
clone_attributes_targets
Target Column
For each <b>Source Column</b>, select the corresponding <b>Target Column</b>. The properties of the source column will be cloned to the target column.

If there is a column in the target data table whose name matches a column in the source data table, that column is selected by default, but you can change any of the selections. A target column is <i>not</i> required to have the same name as its corresponding source column.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=N5Z4cXW0Jzk" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
contact
Contact
At least one <b>Contact</b> is required.

Full contact information should be included for the position of data manager or other designated contact and should be kept current and independent of personnel changes. If multiple contacts are listed (e.g. both a data and site manager) all should be kept current. Technicians who performed the work belong under <b>Associated Party</b> rather than <b>Contact</b>.
--------------------
contacts
Contacts
At least one <b>Contact</b> is required.

Full contact information should be included for the position of data manager or other designated contact and should be kept current and independent of personnel changes. If multiple contacts are listed (e.g. both a data and site manager) all should be kept current. Technicians who performed the work belong under <b>Associated Party</b> rather than <b>Contact</b>.
--------------------
contents
Contents	
You can use ezEML as a "wizard" (i.e., by proceeding through the sections in sequence, filling out the metadata as you go), or you can click on any of the links under <b>Contents</b> to jump directly to that section of the metadata.

For more information on navigating in ezEML, see <a style="color: steelblue;" href="/static/user_guide/navigating.pdf" target="_user_guide_ezeml">Navigating in ezEML</a> in the <a style="color: steelblue;" href="/eml/user_guide">User Guide</a>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/T2lhEBWzIPQ" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
creator
Creator
A creator is considered to be an author of the data package, i.e. a person responsible for intellectual input into its creation. At least one creator is required.

For long-term data, e.g., from an LTER Site, we recommend that you include the organization or current principal investigator. It should be kept in mind that searchers frequently default to searches using the PI’s last name. Therefore it is a reasonable practice to include more creators rather than fewer, even if it blurs the credit for long-term data.
--------------------
creators
Creators
A creator is considered to be an author of the data package, i.e. a person responsible for intellectual input into its creation. At least one creator is required.

For long-term data, e.g., from an LTER Site, we recommend that you include the organization or current principal investigator. It should be kept in mind that searchers frequently default to searches using the PI’s last name. Therefore it is a reasonable practice to include more creators rather than fewer, even if it blurs the credit for long-term data.

Citations generally list creator names in the order shown, so order is significant.
--------------------
data_package_id
Data Package ID
EML requires a data package to have a <b>Data Package ID</b>, but if your data package is going to be submitted to EDI's data repository by using <b>Send to EDI</b>, you can leave the Data Package ID blank. Our data curators will supply an ID when they receive your data package.

In the event that you've already obtained a Data Package ID (e.g., from an LTER site information manager), however, go ahead and enter it here.

For data repositories other than EDI’s, contact the data repository for an appropriate Data Package ID value.
--------------------
data_source
Data Source

A <b>Data Source</b> documents data packages and other data entities used in the creation of the current dataset. They serve to document data <b>provenance</b> and to provide a means of tracking data lineage. Data sources are not required, but are strongly recommended.
--------------------
data_source_title
Title

The Title of the data source. If you use <b>Fetch Data Source Info from EDI</b> to retrieve a data source from EDI's data repository, the title will be filled in automatically.
--------------------
data_source_online_description
Online Description

This element holds a brief description of the online item (e.g., data package). This description element could be used to supply the text for an html anchor tag, for example.

If you use <b>Fetch Data Source Info from EDI</b> to retrieve a data source from EDI's data repository, the online description will be filled in automatically with the text, "This online link references an EML document that describes data used in the creation of this derivative data package." Feel free to change this text as appropriate.

If you are using Data Source to reference data that is not available online, you can leave this field blank.
--------------------
data_source_url
URL

A URL pointing to the online data source. If you use <b>Fetch Data Source Info from EDI</b> to retrieve a data source from EDI's data repository, the URL will be filled in automatically, pointing to the EML document in the repository.

If you are using Data Source to reference data that is not available online, you can leave this field blank.
--------------------
data_source_creators
Creators

The creator(s) of the data source. If you use <b>Fetch Data Source Info from EDI</b> to retrieve a data source from EDI's data repository, the creators will be filled in automatically.

At least one Creator is required.
--------------------
data_source_contacts
Contacts

Persons or organizations who act as contacts regarding the data source. If you use <b>Fetch Data Source Info from EDI</b> to retrieve a data source from EDI's data repository, the contacts will be filled in automatically.

At least one Contact is required.
--------------------
data_table
Data Table
A data table is one tabular entity in the data package, identified by its name. The metadata for a data table contains information about the data table as a whole, such as a description, the filename, the number of records, etc., as well as information about the various columns of the table: their names, data types, etc.

When you upload a data table, ezEML infers as much metadata as it can from the table itself. ezEML can, for example, detect the file size, number of records, etc., and it can infer many of the attributes of the table's columns: name of column, variable type, etc.

Certain metadata elements (such as the descriptions of the table and of each of the columns) must be entered manually, since they do not appear in the table file. To determine which metadata elements remain to be filled in, use the <b>Check Metadata</b> feature. You should also check that ezEML has inferred the columns' data types correctly.

To view and edit the properties of the columns, click the <b>Edit Column Properties</b> button.
--------------------
data_table_errors
Check Data Table: Results
<b>Check Data Tables</b> performs various quality checks on the contents of data tables. The results for a particular data table are displayed here on <b>Check Data Table: Results</b>.

Errors are organized by column. For errors that occur in a particular row of the table, the row number is shown. A description of the error is displayed, including the <b>Expected</b> value (i.e., what kind of entry is expected based on the metadata for the table) and the value that was <b>Found</b> (i.e., the value that actually was present in the data table at that location).

If the same kind of error occurs in a range of consecutive rows, we display the first and last rows in the range, with an ellipsis ("...") indicating that the intervening rows were omitted. It is often the case that the same kind of error is repeated many times (e.g., when datetimes were entered in a format that conflicts with the format string defined in the metadata), and it is unnecessary to display every error in the list.

Some errors pertain to a column as a whole (e.g., the column is a datetime variable but the format string is not one that the EDI repository supports). In such cases, the row number will be blank.

Sometimes leading and trailing spaces are present and cause errors. To make such cases easier to find, we display expected and found values with each leading and trailing space represented by the <span style="color:red;font-weight:bold;font-size:100%;">❏</span> character, in red.

You may make corrections to the data table and/or metadata as needed and then re-run <b>Check Data Tables</b> for the given table, iterating until errors have been removed to your satisfaction.

Note that when data packages are submitted to EDI's data repository, data table error checking is performed there as well. Experienced users of the repository may recognize that the repository's error checking is more permissive than the checking being done here in ezEML. ezEML’s error checking is intended to reflect best practices and help data providers minimize the data cleaning burden that will be passed on to consumers of their data.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/hXbIDffHHcE" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
data_tables
Data Tables
A data table is one tabular entity in the data package, identified by its name. The metadata for a data table contains information about the data table as a whole, such as a description, the filename, the number of records, etc., as well as information about the various columns of the table: their names, data types, etc.

To enter a table's metadata into ezEML, start by uploading it via the <b>Load Data Table from CSV File</b> button. The table is assumed to be in a text file in CSV (comma-separated value) format. Besides commas, ezEML accepts several other field delimiters, such as tabs. When you upload the table, ezEML infers as much metadata as it can from the table itself. ezEML can, for example, detect the file size, number of records, etc., and it can infer many of the attributes of the table's columns: name of column, variable type, etc.

Certain metadata elements (such as the descriptions of the table and of each of the columns) must be entered manually, since they do not appear in the table file. To determine which metadata elements remain to be filled in, use the <b>Check Metadata</b> feature. You should also check that ezEML has inferred the columns' data types correctly.
--------------------
data_table_reupload
Re-upload Data Table
The purpose of <b>Re-upload Data Table</b> is to let you update a data table's contents (e.g., because you've added some new rows or edited some cell values) without having to enter the metadata for the data table and its columns all over again.

Moreover, if you later use <b>Export Data Package</b>, <b>Send to EDI</b>, or <b>Send to Colleague</b> to create a zip file containing the EML metadata and all of the data tables and other entities associated with the data package, <b>it is essential that the final, corrected versions of all files have been uploaded to ezEML</b>, because it is the versions that have been uploaded to ezEML that will be included in the exported data package.

<b>Re-upload Data Table</b> requires the number of columns in the table to be the same as in the original table, but it allows column names and types to change.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/QLRbCqQZt20" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
data_table_reupload_full
Re-upload Data Table
The purpose of <b>Re-upload Data Table</b> is to let you update a data table's contents (e.g., because you've added some new rows or edited some cell values) without having to enter the metadata for the data table and its columns all over again.

Moreover, if you later use <b>Export Data Package</b>, <b>Send to EDI</b>, or <b>Send to Colleague</b> to create a zip file containing the EML metadata and all of the data tables and other entities associated with the data package, <b>it is essential that the final, corrected versions of all files have been uploaded to ezEML</b>, because it is the versions that have been uploaded to ezEML that will be included in the exported data package.

<b>Re-upload Data Table</b> requires the number of columns in the table to be the same as in the original table, but it allows column names and types to change.

Choose the CSV file containing the updated data table, and set the Field Delimiter and Quote Character, as needed. Then click <b>Re-upload</b> to perform the update. Table properties such as Size, Number of Records, and MD5 Checksum will be recalculated automatically. Properties of the data table's columns will be preserved to the extent possible.

The CSV file's name is not required to be the same as the name of the CSV file uploaded previously.
--------------------
data_table_name
Data Table Name
The name identifies the data table within the data package.

Example: SpeciesAbundance1996
--------------------
data_table_description
Data Table Description
Text generally describing the data table and relevant information about its contents.

Example: Species abundance data for 1996 at the VCR LTER
--------------------
data_table_object_name
Filename
The name of the file that is the source of the data table.

Example: species_abundance_1996.csv
--------------------
data_table_attribute_orientation
Attribute Orientation
Specifies whether the data attributes are organized in columns or rows.
--------------------
data_table_field_delimiter
Field Delimiter
Specifies the character used in the data table file for delimiting data values. Usually commas or tabs.
--------------------
data_table_size
Size
The size of the data table, in bytes.
--------------------
data_table_checksum
MD5 Checksum
The checksum for the data table, calculated using the MD5 message-digest algorithm.
--------------------
data_table_header_lines
Number of Header Lines
The number of header lines preceding the data. I.e., the number of header lines that should be skipped before starting to parse the data.
--------------------
data_table_quote_character
Quote Character
Character used to quote values for delimiter escaping.

If your data table is a CSV file with fields separated by commas, for example, then a text field that contains one or more commas will appear to be multiple fields. To deal with such cases where the field delimiter is used within a text field, enclose the text field in quotes. <b>Quote Character</b> defines which "flavor" of quotes you are using, double quotes (") or single quotes (').
--------------------
data_table_record_delimiter
Record Delimiter
Character(s) used to delimit records (i.e., rows).

The record delimiter is usually a linefeed (\n) on UNIX, a carriage return (\r) on MacOS, or both (\r\n) on Windows/DOS.
--------------------
data_table_case_sensitive
Case Sensitive
Specifies text case sensitivity of the data in the data table. The valid values are yes or no.

If it is set to yes, then values that differ only in case (e.g.,LOW, low) represent distinct values. If set to no, then values that differ only in case represent the same value.
--------------------
data_table_number_of_records
Number of Records
The integer count of the number of records (rows) in the data table.

It should only include records that represent observations. I.e., it would not include any details of physical formatting such as the number of header lines.
--------------------
data_table_online_url
Online Distribution URL
If the data table is available online, its URL address.
--------------------
deprecated_data_source
Deprecated Data Source
Formerly, ezEML allowed you to specify a data source using free-form text. This was a temporary expedient, and is now deprecated.

In the <b>Description</b> text box on this <b>Data Source</b> page, you will see a string <br>
<code>==================== Data Sources =========================</code>.

Please remove this string and any text that follows it, up to and including the string <br>
<code>===========================================================</code>.

Use <b>Add Data Source</b> and/or <b>Fetch Data Source Info from EDI</b> to add new data sources. We apologize for the inconvenience.
--------------------
export_package
Export ezEML Data Package
When you have entered all required metadata and uploaded all associated data files (data tables and other entities) to ezEML, you're ready to export the data package.

<b>Export ezEML Data Package</b> creates an archive (zip) file containing the EML metadata (in both XML format and ezEML's JSON format) and the data files. This archive file can be downloaded to your computer. You will also be provided with a URL address for downloading the archive, which you can share with collaborators, for example.

To submit the data package to the EDI data repository, you can go directly to <b><a href="edit/home.submit_package">Send to EDI</a></b> which will take care of creating the archive and sending it to EDI for submission.
--------------------
fetch_data_source
Fetch Data Source Info from EDI

If a data source is a data package in the EDI Data Repository, you can use <b>Fetch Data Source Info from EDI</b> to retrieve the data source's metadata from EDI and populate the data source's metadata fields in ezEML.

Click the <i>scope</i> to which the data package belongs.
--------------------
fetch_data_source_2
Fetch Data Source Info from EDI

If a data source is a data package in the EDI Data Repository, you can use <b>Fetch Data Source Info from EDI</b> to retrieve the data source's metadata from EDI and populate the data source's metadata fields in ezEML.

Click the <i>identifier</i> for the data package. If the data package exists in only one revision, that revision will be fetched immediately. If there are multiple revisions, you will be given the opportunity to choose which revision to fetch.
--------------------
fetch_data_source_2a
Fetch Data Source Info from EDI

If a data source is a data package in the EDI Data Repository, you can use <b>Fetch Data Source Info from EDI</b> to retrieve the data source's metadata from EDI and populate the data source's metadata fields in ezEML.

Click the desired <i>revision</i> of the data package. Its information will be fetched immediately.
--------------------
fetch_from_edi
Fetch a Data Package from EDI
ezEML can import an EML XML file from the EDI data repository. Packages in the repository are organized in "scopes" -- e.g., "edi", "knb-lter-and", etc. If you have visited EDI's <a href="https://portal.edirepository.org/nis/home.jsp">Data Portal</a> you have seen a structure similar to what you seen here in ezEML. Click on the scope of interest, then click on the package number within the scope.

ezEML will retrieve the latest revision of the selected data package from the data repository and import it into ezEML via the "Import EML File (XML)" workflow.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=PNhiBPXWAdA&t=799s" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
funder_identifiers
Funder Identifier(s)
One or more canonical identifiers that reference the funder. If entering more than one identifier, separate them by commas.

These identifiers should be globally unique. The most common form of a funder identifier is a DOI identifier of an institution or program drawn from the CrossRef Open Funder Registry (https://github.com/Crossref/open-funder-registry), which assigns DOIs to each funding agency and to their programs and links these together in a navigable hierarchy.
--------------------
funder_name
Funder Name
The name of the funding institution, with fully expanded acronyms to show the full, official name of the funding agency. This field is required.

In general, this should match the official name of the funder as listed in an Authority such as the Open Funder Registry.
--------------------
geographic_coverages
Geographic Coverage
<b>Geographic Coverage</b> describes locations of research sites and areas related to the data, and is intended for general placement of points on a map.

At least one <b>Geographic Coverage</b> element should be included, whose bounding coordinates describe the extent of the data. As a default, this could be the nominal boundaries of a sampling area. A more accurate extent (recommended) would be the maximum extent of the data, for each of north, south, east, and west.

Additional <b>Geographic Coverage</b> elements should be included if there are significant distances between study sites and grouping them in one bounding box would be misleading or confusing. For example, a cross-site study should have bounding boxes for each site.
--------------------
geographic_coverages_csv_file
Add / Load Geographic Coverage
You can enter <b>Geographic Coverage</b> elements (bounding boxes) directly in ezEML by clicking <b>Add Geographic Coverage</b>, or you can click <b>Load Geographic Coverage from CSV File</b> to load geographic coverage elements from a comma-separated value (CSV) file that you have prepared in advance.

In the latter case, the CSV file is required to have the following format:
<ul>
<li>A header row consisting of:&nbsp;
"geographicDescription,northBoundingCoordinate,southBoundingCoordinate,eastBoundingCoordinate,westBoundingCoordinate,minimumAltitude,maximumAltitude,altitudeUnits"
<li>The geographicDescription column contains strings (text).
<li>The bounding coordinate columns contain latitude/longitude coordinates in decimal degrees format.
<li>For latitudes (north/south coordinates), use a minus sign for latitudes south of the equator.
<li>For longitudes (east/west coordinates), use a minus sign for longitudes west of the prime meridian.
<li>Altitude Minimum and Altitude Maximum need to be in decimal format (e.g., 0.0 rather than 0).
<li>Altitude Units must be one of the following: meter, nanometer, micrometer, micron, millimeter, centimeter, decimeter, dekameter, hectameter, kilometer, megameter, angstrom, inch, foot, Foot_US, yard, mile, nauticalMile, fathom, Foot_Gold_Coast, Yard_Indian, Link_Clarke, Yard_Sears.
<li>If you are not specifying Bounding Altitudes, leave the corresponding table cells blank.
</ul>

Example:<br>
geographicDescription,northBoundingCoordinate,southBoundingCoordinate,eastBoundingCoordinate,westBoundingCoordinate,minimumAltitude,maximumAltitude,altitudeUnits<br>
Lake Wingra,43.062543,43.058787,-89.415478,-89.432468,0.00,2.50,meter<br>
Lake Kegonsa,42.987536,42.958923,-89.223452,-89.283877<br>
--------------------
geographic_description
Geographic Description
<b>Geographic Description</b> is a short text description of a data package's geographic areal domain. A text description is especially important to provide a geographic setting when the extent of the data set cannot be well described by the "bounding coordinates", or in the case of data which are not specifically geospatial.

In cases where the "bounding coordinates" do not adequately describe the extent of the data set, the discrepancy can be identified and described here.

The coordinates may define a rectangle around a country, with this Geographic Description containing a disclaimer and/or further details concerning the border. E.g., a study of the diseases of salmon may not have a specific geographic extent associated with it, but the salmon were collected in the states of Washington and Oregon. The "bounding coordinates" might form a general rectangle around the states of Washington and Oregon, but the Geographic Description might state that the study actually took place only along certain rivers within those states.

Geographic Description can also contain information about the collection of bounding coordinates, e.g., an altitude value that is referenced to Mean Lower Low Water, or the projection system that the latitude and longitude coordinates were taken from.</para>
--------------------
import_funding_awards
Import Funding Awards
You may import the details for one or more funding awards from another data package.

Note that you may also "import" from the current data package, to "copy and paste" a funding award to which you can then make edits.
--------------------
import_funding_awards_2
Import Funding Awards
Select the funding awards to import.

If none are shown, none are available in the selected data package.
--------------------
import_geographic_coverage
Import Geographic Coverage
You may import selected geographic coverage details from another data package.

Currently, only geographic coverages at the data package level (as opposed to the individual data table level) are available to import.
--------------------
import_geographic_coverage_2
Import Geographic Coverage
Select the geographic coverages to import.

If none are shown, none are available in the selected data package.
--------------------
import_package
Import an ezEML Data Package
<b>Import an ezEML Data Package</b> lets you import a data package archive file that was exported from ezEML (see <b>Export ezEML Data Package</b>).

The data package archive file may have been sent to you by a collaborator, for example. Alternatively, you may have submitted a data package to EDI (see <b>Send to EDI</b>), and EDI's data curators may have found it necessary to make corrections or other changes to your data package. In that case, EDI's data curators will send you an updated data package archive file so you can import it and keep your ezEML account up to date.
--------------------
import_package_2
Import an ezEML Data Package
If the data package you are importing has the same name as one that already exists in your ezEML account, ezEML asks you whether you'd like to replace the existing package or import the package as a copy, instead. This is similar to what happens when you use "Save As" in a program like Microsoft Word, for example.

If you elect to <b>Replace</b> the package, the existing version will be overwritten by the new version.

Suppose, instead, that you elect to <b>Copy</b> the package. If the existing package is called my_data_package, then the new version will be saved as my_data_package_COPY (or my_data_package_COPY2,  my_data_package_COPY3, etc., as needed).
--------------------
import_project
Import Project
You may import a project from another data package to be incorporated in the current data package as the primary project.

The project you import may be a primary project or a related project in the other data package, but in the current data package it will be treated as the primary project. To import a project as a related project instead, use <b>Import Related Projects</b>.
--------------------
import_project_2
Import Project
Select the project you wish to import as the primary project.

If none are listed, none are available in the selected data package.
--------------------
import_related_projects
Import Related Projects
You may import one or more projects from another data package to be incorporated in the current data package as related projects.

The projects you import may be a primary project or a related project in the other data package, but in the current data package they will be treated as related projects.
--------------------
import_related_projects_2
Import Related Projects
Select the projects you wish to import as related projects.

If none are listed, none are available in the selected data package.
--------------------
import_responsible_parties
Import Responsible Parties
You may import the details for one or more responsible parties (persons, organizations, or positions) who have been specified as Creators, Contacts, etc. in another data package. This saves you from having re-enter their details.

The parties you import do not have to be used for the same purpose in this data package as they were in the other data package. For example, a person who was a Contact in another data package can be imported into this data package as an Associated Party.

<b>Note that you may also "import" from the current data package, for example to re-use one or more Creators as Contacts or Project Personnel.</b>

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/gAnzUKiXBaQ" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
import_responsible_parties_2
Import Responsible Parties
Select the responsible parties (persons, organizations, positions) whose details you wish to import, and select how they will be used in the current data package, i.e., as Creators, Metadata Providers, Associated Parties, Contacts, or Project Personnel.

If none are listed, none are available in the selected data package.
--------------------
import_taxonomic_coverage
Import Taxonomic Coverage
You may import selected taxonomic coverage details from another data package.

Note that you may also "import" from the current data package, to "copy and paste" a taxonomy you can then edit.

Currently, only taxonomic coverages at the data package level (as opposed to the individual data table level) are available to import.
--------------------
import_taxonomic_coverage_2
Import Taxonomic Coverage
Select the taxonomic coverages to import.

If none are shown, none are available in the selected data package.
--------------------
import_template
New EML Document from a Template
A particular research site or organization may find it useful to create templates that can serve as starting points for EML documents to be created by people in their organization. Such templates reside in their own space on the ezEML server, rather than in an individual ezEML login account, so they are accessible to everyone.

A typical template might contain a selection of Creators, Geographic Coverages, and Keywords, for example. When a new document is created from the template, it is pre-populated with all of the items in the template. This saves work, but it also assists in standardizing spellings, addresses, etc., so they are consistent across documents.

Templates are organized in a folder structure defined by their creators. To expand a folder, click on its name (not the icon). Template names are displayed in blue italics. Click a template name to select the template, then click <b>OK</b>. You will then be asked to provide a name for the new EML document to be created from the template.

See also the <b>Creating a New EML Document from a Template</b> section in <a style="color: steelblue;" href="/static/user_guide/creating_new_documents.pdf" target="_user_guide_ezeml">Creating a New EML Document</a> in the <a style="color: steelblue;" href="/eml/user_guide">User Guide</a>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/T7GAYXS1liI" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
import_xml
Import an EML XML File
Use <b>Import an EML XML File</b> to read an EML <i>XML</i> file (as opposed to a data package exported from ezEML) into ezEML. You may, for example, wish to use ezEML to create a revision of an existing EML XML file that was created outside of ezEML.

ezEML supports only a subset of the EML metadata standard, so an EML XML file that was created outside of ezEML may contain some EML features (EML nodes) that ezEML is unable to process. When such a file is imported into ezEML, the resulting metadata will be incomplete, but it may still be useful. ezEML will list any errors it encounters, and it will "prune" the metadata, removing nodes it considers invalid in order to make the resulting metadata valid for processing within ezEML.

To start the process, click <b>Choose File</b>, select the EML XML file you wish to import, then click <b>Import</b>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/PNhiBPXWAdA" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
import_xml_2
Import an EML XML File
When you import an EML XML File, the ezEML EML document that is created is given the same name as the XML file, minus the ".xml" file extension.

You may already have an EML document by that name in your ezEML account. In such cases, ezEML gives you the option of replacing the existing document or creating a copy. In the latter case, ezEML appends "_COPY", "_COPY2", or "_COPY3", etc., to the name to create a name that is unique in your ezEML account.
--------------------
import_xml_3
Import an EML XML File
ezEML supports only a subset of the EML metadata standard, so an EML XML file that was created outside of ezEML may contain some EML features (EML "nodes") that ezEML is unable to process. When such a file is imported into ezEML, the resulting metadata will be incomplete, but it may still be useful. ezEML lists any errors it has encountered, and it "prunes" the metadata, removing nodes it considers invalid in order to make the resulting metadata valid for processing within ezEML.

Note that what ezEML considers "errors" may not actually be errors from the perspective of the EML metadata standard. The XML may be valid EML, but if it was created outside of ezEML it may contain EML features that ezEML cannot process.

There are various kinds of such "errors".

The XML document may use some EML tags that are unknown to ezEML. Some examples include changeDate, changeHistory, changeScope, gRing, and datasetGPolygon. Some EML tags (nodes) may incorporate attributes that ezEML is unable to process. Some nodes may have "child" nodes that ezEML doesn't understand. And various other kinds of errors may be encountered (e.g., an empty node where ezEML requires a non-empty string).

When nodes are encountered that are invalid from ezEML's perspective, they are removed ("pruned") from the metadata model created in ezEML. The "parent" of a removed node may then become invalid if the removed child was a required node, and so on. ezEML prunes nodes as needed to arrive at a metadata model that satisfies its internal rules for the subset of the EML standard it supports.

All such errors and subsequent pruning are listed so you can decide if the model will still be useful for your purposes. To make it easy for you to make a record of the errors, the <b>Copy Errors to Clipboard</b> button is provided. Click it to copy the error list to the system clipboard, then paste it into a text document to save it. Click <b>Continue</b> to go to the <b>Title</b> page to begin editing the ezEML document as you see fit.
--------------------
intellectual_rights
Intellectual Rights
Intellectual rights are controlled at the source, however it is recommended that data be released with as few restrictions as possible.

EDI's default policy is <b>CC0</b>. The LTER Network-wide default policy is <b>CC BY</b>. Please consult those organizations for more information and more details.
This includes information about the frequency of update and whether there is ongoing data collection.
--------------------
keywords
Keywords
It is recommended that meaningful sets of keywords be provided.

One set of keywords may identify the contributing organization(s), e.g., the LTER or OBFS site, LTREB or Macrosystems project, especially if data are co-funded or funding is leveraged.

Meaningful geographic place names also are appropriate (e.g. state, city, county).

Note: Communities sometimes have specific requests for keywords to assist in searches. E.g, the LTER requests that keywords should include LTER core research area(s), the network acronym (LTER, ILTER, etc.), three-letter site acronym and site name. In addition to specific keywords, relevant conceptual keywords should also be included, e.g., from the LTER Controlled Vocabulary.
--------------------
load_taxonomic_coverage
Load Taxonomic Coverage from CSV File

<b>Load Taxonomic Coverage from CSV File</b> lets you load multiple taxa in a single bulk operation. ezEML fills in taxonomic hierarchies for the specified taxa automatically by querying a user-specified taxonomic authority.

The CSV file is required to have three columns. The first row must be a header row, with headers (spelled as shown):<br>
&nbsp;&nbsp;&nbsp;&nbsp;taxon_scientific_name<br>
&nbsp;&nbsp;&nbsp;&nbsp;general_taxonomic_coverage<br>
&nbsp;&nbsp;&nbsp;&nbsp;taxon_rank<br>

Then each taxon goes in a separate row, with its scientific name in the first column. Specify the lowest available taxonomic level, preferably the species binomial, although higher levels can also be used. For each taxon, ezEML will fill in its taxonomic hierarchy automatically (e.g., the genus, family, etc. for a species entry).

If you have descriptive text to go in the generalTaxonomicCoverage element (optional) of the EML metadata, enter it in the second column. Each taxonomic hierarchy will have its own generalTaxonomicCoverage element.

Ordinarily, the third column should be left blank. The only time you should enter a taxon rank is when you want ezEML to add that taxon to the metadata <i>without</i> querying a taxonomic authority (e.g., because the taxon is not available in an authority). In that case, the taxon rank you’ve provided will be used. If the taxon rank is empty (the usual case), ezEML will take that as indicating that you want ezEML to query the taxonomic authority and get the rank and full taxonomic hierarchy from the authority.

Select your preferred taxonomic authority from the list and click <b>Upload</b>. Loading the CSV file may take several minutes, depending on the number of taxa included, because of the time required to access the taxonomic authority online.

If you want to use different taxonomic authorities for different subsets of your taxa, create separate CSV files for the subsets and upload them separately.

Please note that the CSV file should be UTF-8 encoded. If you use Microsoft Excel, do "Save As..." and under "File Format" in Excel's Save As dialog, pick "CSV UTF-8".

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/Iuh8tTAQN8Q" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
maintenance
Maintenance
A description of the maintenance of this data resource.

This includes information about the frequency of update and whether there is ongoing data collection.
--------------------
maintenance_description
Maintenance Description
A text description of the maintenance of this data resource.

It may consist of multiple paragraphs.
--------------------
maintenance_freq
Maintenance Update Frequency
Frequency with which changes and additions are made to the dataset after the initial dataset is completed.
--------------------
manage_data_usage
Manage Data Usage
The <b>Manage Data Usage</b> page is for use by system admins. It is available only to the EDI LDAP account. It lists all ezEML accounts and shows the amount of data storage used by each. In addition, it provides an entry point for running garbage collection on ezEML data storage.

Garbage collection looks at all data packages whose metadata has not been modified within the specified number of days and deletes their uploaded data tables and other entities. In addition, it deletes the associated ezEML data packages that have been prepared for export, for example by the use of the Send to EDI command.

The metadata files themselves are preserved, so the data packages can be reconstituted, if needed, by re-uploading the data tables and other entities.

To perform garbage collection, set the desired number of days and click the <b>Garbage Collect</b> button.

Columns are sortable by clicking on the column header. The "Date Modified" column shows when the most recent modification was made to an ezEML metadata document in the user's account. This is generally different from the operating system's modified datetime, since the latter may be affected, for example, by garbage collection, even though the user has not been active in the account.
--------------------
manage_packages
Manage Data Packages
The <b>Manage Data Packages</b> page lists the data packages that currently exist in the ezEML account of the logged-in user and lets you delete any packages you no longer need. If you are an Information Manager, for example, or data curator, you may accumulate a number of packages over time, and you may want to delete some of them to keep your account from getting too cluttered.

The table can be sorted by package name, date modified, or size in ascending or descending order. Click on the column header to sort by that column. Click again to reverse the sort order. The size column shows the size of the package in bytes, including the XML metadata file and any data files that have been uploaded to the package. Clicking on a package name opens that package in ezEML.
--------------------
metadataProvider
Metadata Provider
A metadata provider is a person(s) or organization(s) responsible for producing or providing the metadata content.

For primary data sets generated by LTER sites, the LTER site should typically be listed under Metadata Provider using the Organization Name field. For acquired data sets, where the Creator and Associated Party are not the same people who produced the metadata content, the actual metadata content provider should be listed instead.
--------------------
metadata_providers
Metadata Providers
The metadata provider is the person(s) or organization(s) responsible for producing or providing the metadata content.

For primary data sets generated by LTER sites, the LTER site should typically be listed under Metadata Provider using the Organization Name field. For acquired data sets, where the Creator and Associated Party are not the same people who produced the metadata content, the actual metadata content provider should be listed instead.
--------------------
measurement_scale
Variable Type
Columns (variables) can have the following types: Categorical, Numerical, Text, or DateTime.

<b>Categorical</b> variables contain alphanumeric codes used to categorize data. Examples of categorical variables are 1 for Male and 2 for Female, or M for Male and F for Female. Some categorical variable codes convey an order (e.g., Low, Medium, High), others do not.

<b>Numerical</b> variables contain ordinary numerical data, i.e., numerical values not used for categorization. Values may be integers (e.g., counts of specimens) or real numbers (e.g., temperature, pH). Units are required for all numerical variables.

<b>Text</b> variables contain text values not used for categorization. Examples include names or identification numbers of experimental subjects.

<b>DateTime</b> variables contain date and time values. Note that time <i>durations</i> should be treated as Numerical values.

To change the type of a variable (e.g., from Categorical to Text) click <b>Change Type</b> and select the new type.
--------------------
metadata_providers
Metadata Providers
The metadata provider is the person(s) or organization(s) responsible for producing or providing the metadata content.

Metadata providers are not required.
--------------------
methods
Method Steps
Method steps are descriptions of specific steps of the method employed when collecting data. They are intended to be descriptive, i.e., human-readable rather than machine-readable.

The method steps document a series of procedures followed to produce a data object. These may include text descriptions of the procedures, references to relevant literature, software, instrumentation, source data and any quality control measures taken.

An additional use of method steps is to specify data <b>provenance</b>, i.e., the origin or history of data used in the creation of the current data package. Provenance metadata is important in making research transparent and reproducible. To specify provenance for your data package, create a method step and add to it one or more Data Sources that refer to the data package(s) that were used to create the current data package. It is customary to place such provenance method steps at the end of the method steps list. For more on data provenance, see <a style="color: steelblue;" href="/static/user_guide/documenting_data_provenance.pdf" target="_user_guide_ezeml">Documenting Data Provenance</a> in the <a style="color: steelblue;" href="/eml/user_guide">User Guide</a>.

For more on documenting data provenance metadata in ezEML, watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/LkCA_qgDwhc" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
method_step_description
Method Step Description
Description of the methods employed in collecting or generating a data set or other resource or in quality control and assurance.

Describe the methodology for a project, experiment, or particular data table or the steps taken to control or assure the quality of the data. Likewise, a literature citation may be provided that describes the methodology that was employed. Or the information my be provided by either referencing a protocol resource or entering the structured protocol information.

If this method step is intended to document data <b>provenance</b>, i.e., the origin or history of data used in the creation of the current data package, then the description can be something like:
<p style="padding:0px 20px 0px 20px;background-color:#F0F0F0">This method step describes provenance-based metadata as specified in the LTER EML Best Practices.</p>
In such a case, you should also add one or more Data Sources that refer to the data package(s) that were used in the creation of the current data package.
--------------------
method_step_instrumentation
Method Step Instrumentation
Description of instruments used for measurement and recording data.

This may include any instruments used in the data collection or quality control and quality assurance. The description should provide vendor, model number, optional equipment, etc.

Example: LACHAT analyzer, model XYX.

<b>Please note:</b> The EML standard allows multiple instrumentation elements to be associated with a single method step, but the ezEML interface only allows for one. To specify multiple instrumentation descriptions, enter them on separate lines. If an EML document is imported into ezEML that contains multiple instrumentation elements for a method step, they will be displayed in the same <b>Instrumentation</b> field, on separate lines, and they will be saved in a single instrumentation element in the metadata.
--------------------
method_step_data_sources
Method Step Data Sources
If you used other datasets in this method step, or if this method step is being used to document data <b>provenance</b>, i.e., the origin or history of data used in the creation of the current data package, specify the data sources here.

For each dataset used, specify:<br>
&nbsp;&nbsp;- the datasets's title<br>
&nbsp;&nbsp;- a URL, DOI, or other globally unique identifier<br>
&nbsp;&nbsp;- a creator's name and email<br>
&nbsp;&nbsp;- a contact's name and email.

If the referenced dataset is in the EDI data repository, you can use <b>Fetch Data Source Info from EDI</b> to retrieve the info from EDI and fill it in automatically. Otherwise, use <b>Add Data Source</b> to enter the info manually.

For more on data provenance, see <a style="color: steelblue;" href="/static/user_guide/documenting_data_provenance.pdf" target="_user_guide_ezeml">Documenting Data Provenance</a> in the <a style="color: steelblue;" href="/eml/user_guide">User Guide</a>.
--------------------
name_org_position
Last Name, Organization, Position Name
place holder
--------------------
nav
Navigating in ezEML
The <b>Save and Continue</b> button saves any changes you've made on the current page and moves you ahead to the next section of the metadata. You can step through the sections sequentially using <b>Save and Continue</b>, or you can click any of the links under <b>Contents</b> in the left margin to save changes and jump directly to a particular section of the metadata.

The <b>Reset Changes</b> button clears the changes you've made on the current page and leaves you on that page.

<i>You can think of using ezEML as filling out one big form that's organized as a number of separate pages. As you move from page to page, your changes are automatically retained (as you'd expect when filling out a form), except in the cases where a page has a </i><b>Cancel</b><i> button, which lets you exit that page without saving.</i>

The <b>ezEML</b> link at the top left of each page serves as a "Home" button, taking you back to the top of the Contents list.

It's usually best to refrain from using your browser's forward and back buttons. Using them may cause you to lose unsaved edits.

See also <a style="color: steelblue;" href="/static/user_guide/navigating.pdf" target="_user_guide_ezeml">Navigating in ezEML</a> in the <a style="color: steelblue;" href="/eml/user_guide">User Guide</a>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/T2lhEBWzIPQ" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
new_eml_document
Document Name
Provide a document name for the data package. This is the name by which the document will be known to ezEML. Think of it as you would a file name (without file extension). Choose a name that will be meaningful to you, for example if you come back to ezEML at a later time.

This document name will not appear in the EML itself. I.e., it is distinct from the Title and Data Package ID, both of which are saved in the EML.

If the data package is submitted to the EDI data repository, it will be assigned a Data Package ID, but that process happens outside of ezEML and is unknown to ezEML. ezEML will know the document by the name you provide here.
--------------------
other_entities
Other Entities
<b>Other Entities</b> are data entities other than data tables that will be included in the data package. They are identified by their names.

Examples might include scripts in Python or R, zip files containing ancillary data, photographs and other imagery, etc.
--------------------
other_entity
Other Entity
An <b>Other Entity</b> is a data entity other than a data table that will be included in the data package. Other Entities are identified by their names.

Examples might include scripts in Python or R, zip files containing ancillary data, photographs and other imagery, etc.
--------------------
other_entity_reupload
Re-upload Other Entity
The purpose of <b>Re-upload Other Entity</b> is to let you update an other entity file without having to enter the properties of the other entity all over again. In addition, it updates the file size and checksum, which are part of the metadata describing the other entity.

Moreover, if you later use <b>Export Data Package</b>, <b>Send to EDI</b>, or <b>Send to Colleague</b> to create a zip file containing the EML metadata and all of the data tables and other entities associated with the data package, <b>it is essential that the final, corrected versions of all files have been uploaded to ezEML</b>, because it is the versions that have been uploaded to ezEML that will be included in the exported data package.
--------------------
personnel
Project Personnel
Contact and role information for a person/organization involved in the research project.

Note that Role is a required field.
--------------------
project
Project
This documents the research context of a data package or another project. It can include research goals, motivations, theory, hypotheses, etc., as well as a description of research efforts that form the basis for other work.

To document <i>methods</i> specific to a data package, use <b>Methods</b>.

A project is required to have a Project Title.
--------------------
project_title
Project Title
A descriptive title for the research project.

Example: Species diversity in Tennessee riparian habitats.
--------------------
project_funding
Project Funding
This text field is for documenting funding sources for the research project. It can include information about grants, contracts, and other sources of funding.

However, the preferred way to document project funding is to use the structured funding awards elements that were added in the newest version of the EML schema (2.2.0). To document funding in this preferred way, click the <b>Funding Awards</b> button.

If you clear the Funding text field, it will no longer be displayed. It is displayed only for backward compatibility with data packages that used the Funding text field.

We recommend that you use the Funding Awards elements instead. Because they are structured, they will be easier to search and more machine-readable.
--------------------
pubdate
Publication Date
The year or date of public release of data online.

Because this element may be used in constructing citations, the publication date also should  reflect the 'recentness' of a package. I.e., it should be updated along with significant revisions or data additions (e.g., corrected data or additions to an ongoing time series).

There is an argument for publication date referring to the original date of release, but this is probably only useful for static data packages, or if the only metadata changes are to enhance discovery.
--------------------
publisher
Publisher
The organization publishing the EML metadata (e.g., an LTER site or field station).

Publisher is not required by EML. If you submit your data to the EDI data repository, EDI will be entered automatically as the publisher in the published EML.
--------------------
pubplace
Publication Place
The location where the resource was published, which may be different from where the resource was created.

Example: Madison, WI, USA
--------------------
pubdate
Publication Date
The date of publication.

Publication date is not required by EML. If you submit your data to the EDI data repository, the date of publication will be entered automatically by EDI.
--------------------
related_project
Related Project
A project may be associated with related projects. EML treats one project as the main or primary project, which can then have one or more related projects as "children".

Splitting projects up in this way lets you associate different funding awards with different Principal Investigators, for example.
--------------------
project_personnel
Project Personnel
This documents the people involved in a research project by providing their contact information and role in the project.
--------------------
project_title
Project Title
A descriptive title for the research project.

Example: Species diversity in Tennessee riparian habitats.
--------------------
save_as_document
Document Name
Provide a document name for the data package. This is the name by which the document will be known to ezEML. Think of it as you would a file name (without file extension). It can be any name that will be meaningful to you, for example if you come back to ezEML at a later time.

This document name will not appear in the EML itself. I.e., it is distinct from the Title and Data Package ID, both of which are saved in the EML.
--------------------
send_to_colleague
Send to Colleague
When you've entered all required metadata and uploaded all associated data files (data tables and other entities) to ezEML, you can send the entire package to a colleague (e.g., an LTER Information Manager) via <b>Send to Colleague</b>.

When you click <b>Prepare Package for Colleague</b>, an ezEML Data Package zip file is generated and staged on the ezEML server, ready to be downloaded by your colleague. The zip file contains the EML metadata and the data tables and other entities that make up the package.

After the zip file has been created, a suggested email message is generated for you to send to your colleague. This email contains the link that your colleague will need to use to download the zip file. You will have the opportunity to edit the email message as you see fit before sending it.

To send your package to the EDI Data Repository instead, use <b>Send to EDI</b>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=ouacOxpL0V4&t=234s" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
send_to_colleague_2
Send to Colleague
An ezEML Data Package zip file has been generated and staged on the ezEML server, ready to be downloaded by your colleague. The zip file contains the EML metadata and the data tables and other entities that make up the package.

A suggested email message to your colleague is displayed. This email contains the link that your colleague will need to use to download the zip file. You can click <b>Copy to Clipboard</b> to copy the message to the system clipboard, ready to be pasted into an email. Or, if you have a default email client configured in your browser, you can click <b>Open in Email Client</b> to open the message in your email client directly. Either way, you can edit and personalize the email message as you see fit before sending it.

We let you send the email (rather than ezEML sending an email automatically) so that it will show you as the sender (and thereby be less likely to be mistaken for spam) and so that you will have the opportunity to personalize the message.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=ouacOxpL0V4&t=234s" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
storage_type
Storage Type
This element describes the storage type for data in a RDBMS (or other data management system) field.

Values for this field are by default drawn from the XML Schema Datatypes standard values, such as: integer, double, string, etc. If the XML Schema Datatypes are not used, the type system from which the values are derived should be specified in the Storage Type System field.

Storage Type represents a 'hint' to processing systems as to how the column's contents might be represented in a system or language.

Examples:
  integer
  int
--------------------
storage_type_system
Storage Type System
The system used to define the storage types. This should be an identifier of a well known and published typing system.

The default and recommended system is the XML Schema data type system. For details go to http://www.w3.org. If another system is used (such as Java or C++ types), typeSystem should be changed to match the system.

Examples:
  http://www.w3.org/2001/XMLSchema-datatypes
  java
  C
  Oracle 8i
--------------------
submit_package
Send to EDI
When you've entered all required metadata and uploaded all associated data files (data tables and other entities) to ezEML, you're ready to submit your data package to the data repository hosted by the <a href="https://edirepository.org/" target="_blank"><b>Environmental Data Initiative (EDI)</b></a>.

When you click <b>Send to EDI</b>, an ezEML Data Package archive (zip) file is generated, and an email is automatically sent to the data curators at EDI. This email contains a link to the archive file. EDI's data curators will download the archive file, check its contents, make corrections as needed, and submit the data package to EDI's repository.

Please provide your name and email so that EDI's data curators can contact you with any questions they have and to let you know when the submission has been completed. If you have questions (about particular entries in your metadata, for example), please use the <b>Notes</b> text area to describe them so EDI can assist you better.

<b>Please note:</b> When you click <b>Send to EDI</b>, your data package is sent to EDI's data curators for review. There will be some amount of delay before your package appears in EDI's Data Portal. EDI's data curators will email you when the package has been added to the repository.

To send your package to someone other than EDI, use <b>Send to Colleague</b>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=ouacOxpL0V4&t=136s" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
submit_package_success
Package Sent to EDI
Your package has been sent to the data curation team at EDI. We will notify you when it has been added to the repository.

If you don't hear back from us within 48 hours, please contact us at support@edirepository.org.
--------------------
taxonomic_coverages
Taxonomic Coverage
<b>Taxonomic Coverage</b> should be used to document taxonomic information for all organisms relevant to the study. This helps users find data relevant to their research interests.

The EML standard says that "the lowest available level, preferably the species binomial, should always be included, but higher-level taxa should also be included to support broader taxonomic searches." ezEML can fill in the higher-level taxa for you automatically by accessing a user-specified taxonomic authority online.

To add taxonomic coverage for a taxon interactively, click <b>Add Taxonomic Coverage</b>. To edit an existing taxonomic coverage entry, click the <b>Edit</b> button next to it. To remove a taxonomic coverage entry, click the <b>Remove</b> button next to it.

<b>Load Taxonomic Coverage from CSV File</b> lets you load multiple taxa in a single bulk operation. ezEML will fill in taxonomic hierarchies for the taxa automatically by querying a user-specified taxonomic authority. For details, go to <b>Load Taxonomic Coverage from CSV File</b> and click the Help on that page.

<b>Clear All Taxonomic Coverage</b> will clear all taxonomic coverage so you can start over. This is especially useful when you are developing the CSV file to use in <b>Load Taxonomic Coverage from CSV File</b>. You may need several attempts to finalize the CSV file, and you can clear the coverage between attempts.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/Iuh8tTAQN8Q" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
taxonomic_coverage_fill_hierarchy
Fill Hierarchy
<b>Fill Hierarchy</b> retrieves and lists the higher-level taxa associated with a given taxon.

Enter the Taxon Scientific Name for the most specific relevant taxon (e.g., species or genus), select a taxonomic authority to access, and click <b>Fill Hierarchy</b>. ezEML will send requests to the selected taxonomic authority to retrieve the higher-level taxa, as well as any associated common names, and the taxon ID for each taxon. The taxon IDs let ezEML construct links to the corresponding pages on the taxonomic authority website. These data will be entered in the EML document as well.

The Taxon Scientific Name you enter should be the scientific name for the taxon, not a common name. For a species, this is a binomial name.

If the specified taxon is found in the taxonomic authority database, the Taxon Rank will be set automatically. I.e., if you are going to use <b>Fill Hierarchy</b> for a known taxon, you don't need to worry about getting the taxon rank right. The Taxon Rank selection list is there to cover cases where the taxon you've entered is not found in the supported taxonomic authorities but you want to save it as entered. In such cases, you can still click <b>Save and Continue</b> and the taxon rank and taxon name will be saved in the EML exactly as you've entered them.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/Iuh8tTAQN8Q" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
temporal_coverages
Temporal Coverage
<b>Temporal Coverage</b> represents the period(s) of time when the data were collected, not the period(s) of time the study was conducted if it uses retrospective or historical data.

Two formats are allowed, either a 4-digit year, or a date in ISO format: YYYY-MM-DD.
--------------------
title
Title
The <b>Title</b> field provides a description of the data package. It should be long enough to differentiate it from other similar resources.

It should be descriptive and should mention the data collected, geographic context, research site, and time frame (i.e., what, where, and when).

Example: <i>Vernal pool amphibian density data, Isla Vista, 1990-1996.</i>
--------------------
welcome
Welcome to ezEML

Welcome to ezEML! Here is some initial guidance on its use.

You can think of using ezEML as filling out one big form that's organized as a number of separate pages. As you move from page to page, your changes are automatically retained (as you'd expect when filling out a form), except in the cases where a page has a <b>Cancel</b> button, which lets you exit that page without saving.

<b>Save and Continue</b> buttons save any changes you've made on the current page and move you ahead to the next section of the metadata. You can step through the sections sequentially using <b>Save and Continue</b>, or you can click any of the links under <b>Contents</b> in the left margin to save changes and jump directly to a particular section of the metadata.

<b>Reset Changes</b> buttons clear the changes you've made on the current page and leave you on that page.

The <b>ezEML</b> link at the top left of each page serves as a "Home" button, taking you back to the top of the Contents list.

It's usually best to refrain from using your browser's forward and back buttons. Using them may cause you to lose unsaved edits.

Notice that there are lots of Help buttons in ezEML (see the circular question mark icons). You may find them helpful.

If you click the checkbox below we won't show you this welcome dialog again, but you can always review how to navigate in ezEML either by clicking the help button next to <b>Reset Changes</b> on this <b>Title</b> page or by going to <a style="color: steelblue;" href="/static/user_guide/navigating.pdf" target="_user_guide_ezeml">Navigating in ezEML</a> in the <a style="color: steelblue;" href="/eml/user_guide">User Guide</a>.

You can also watch a short demo video here:&nbsp;&nbsp;<a href="https://youtu.be/T2lhEBWzIPQ" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>

We hope you find ezEML useful, and we welcome your feedback at <a style="color: steelblue;" href="mailto:support.edirepository.org">support@edirepository.org</a>.
<hr style="border-top: 1px solid darkgray;">
<input type="checkbox" id="do_not_show" name="do_not_show" onchange="do_not_change_clicked(this);">&nbsp;Got it. Don't show this dialog again.</input>
<script>
localStorage.getItem("do_not_show_ezeml_welcome_dialog");
function do_not_change_clicked(checkbox) {
    localStorage.setItem("do_not_show_ezeml_welcome_dialog", checkbox.checked);
}
</script>
--------------------
complex_xml
Editing Text Elements in Imported XML

The EML standard allows for substantial complexity in text elements like abstracts and method step descriptions. Such text elements may contain itemized lists, subscripts, markdown, etc. Not all EML files employ this kind of complexity, but the EML file you have just imported does so. In cases like this, ezEML supports the editing of the relevant text elements as follows. Suppose, for example, the dataset's abstract element consists of the following XML:<br>
<pre>
&lt;abstract&gt;<br>
&nbsp;&nbsp;&lt;section&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Hypothetical Abstract&lt;/title&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;para&gt;This is &lt;emphasis&gt;only&lt;emphasis&gt; an example.&lt;/para&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;para&gt;Please note that 1 &amp;lt; 2.&lt;/para&gt;<br>
&nbsp;&nbsp;&lt;/section&gt;<br>
&lt;/abstract&gt;<br>
</pre>

When you go to the Abstract page in ezEML, what you would see is the following:<br>
<pre>
\&lt;abstract\&gt;<br>
&nbsp;&nbsp;\&lt;section\&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;\&lt;title\&gt;Hypothetical Abstract\&lt;/title\&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;\&lt;para\&gt;This is \&lt;emphasis\&gt;only\&lt;emphasis\&gt; an example.\&lt;/para\&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;\&lt;para\&gt;Please note that 1 &lt; 2.\&lt;/para\&gt;<br>
&nbsp;&nbsp;\&lt;/section\&gt;<br>
\&lt;/abstract\&gt;<br>
</pre>

The backslash "escape" characters before the &lt; and &gt; in each XML tag let ezEML distinguish XML tags from normal text that happens to contain &lt; or &gt; characters. If you edit the XML, you must adhere to this convention. Text elements requiring such handling are visually distinguished in two ways: 1) the text is displayed in a different (monospace) font, and 2) a checkmark button <svg style="position: relative;top:4px;" width="1.3em" height="1.3em" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M16.5163 8.93451L11.0597 14.7023L8.0959 11.8984" stroke="black" stroke-width="2"/><path d="M12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21Z" stroke="black" stroke-width="1"/></svg> appears to the right of the element. Clicking the checkmark button causes the XML validity of the element's content to be checked. See also <a style="color: steelblue;" href="/static/user_guide/complex_text.pdf" target="_user_guide_ezeml">Editing Complex Text Elements in Imported XML</a> in the <a style="color: steelblue;" href="/eml/user_guide">User Guide</a>.

Watch a short demo video here:&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=PNhiBPXWAdA&t=348s" target="_ezeml_user_guide"><img src="/user-data/youtube.png" style="height:18px;width:auto;"></a>
--------------------
taxonomy_imported_from_xml
Imported Taxonomy

This package contains taxonomic coverage metadata that was imported from an EML XML file, and the taxonomic coverage metadata has a structure that is inconsistent with ezEML. As a result, you will not be able to view or edit its taxonomic coverage metadata within ezEML.

When you save your package as an EML XML file, however, the Taxonomic Coverage will be preserved intact.

Alternatively, you can replace the taxonomic coverage metadata by using <b>Import Taxonomic Coverage</b> from the Import/Export menu, or you can clear the taxonomic coverage metadata by clicking the <b>Clear All Taxonomic Coverage</b> button. Doing either of these actions will make it possible for you to view and edit taxonomic coverage, but the taxonomic coverage that was imported from the EML XML file will be removed from the package.

